import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import json
import os
import threading
import socket
import time
from datetime import datetime
from tkinter import PhotoImage


class TwitchChatBot:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Twitch Chat Manager")
        self.root.geometry("700x700")
        self.root.minsize(650, 600)
        self.root.configure(bg='#0e0e10')

        try:
            icon = PhotoImage(file="icon.png")  # –ø—É—Ç—å –∫ —Ç–≤–æ–µ–º—É —Ñ–∞–π–ª—É
            self.root.iconphoto(False, icon)
        except Exception as e:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É:", e)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        self.setup_styles()

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connected = False
        self.socket = None
        self.bot_thread = None
        self.stop_bot = False

        self.auto_messages_enabled = False
        self.auto_messages_thread = None
        self.stop_auto_messages = False

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config = self.load_config()
        self.commands = self.load_commands()
        self.auto_messages = self.load_auto_messages()

        self.ensure_default_commands()

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_interface()

        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)

        self.center_window()

    def ensure_default_commands(self):
        """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥—ã !commands –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        if 'commands' not in self.commands:
            self.commands['commands'] = {
                'response': '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: !commands',
                'usage_count': 0,
                'is_default': True
            }
            self.save_commands()

    def get_commands_list(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        if not self.commands:
            return "–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å!"

        command_list = []
        for command in sorted(self.commands.keys()):
            command_list.append(f"!{command}")

        return f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {', '.join(command_list)}"

    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∞"""
        style = ttk.Style()
        style.theme_use('clam')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –≤ —Å—Ç–∏–ª–µ Twitch
        style.configure('Title.TLabel',
                        background='#0e0e10',
                        foreground='#ffffff',
                        font=('Segoe UI', 16, 'bold'))

        style.configure('Subtitle.TLabel',
                        background='#18181b',
                        foreground='#adadb8',
                        font=('Segoe UI', 10))

        style.configure('Custom.TButton',
                        background='#9146ff',
                        foreground='white',
                        font=('Segoe UI', 9, 'bold'),
                        borderwidth=0,
                        focuscolor='none')

        style.map('Custom.TButton',
                  background=[('active', '#772ce8'), ('pressed', '#5c1ec7')])

        style.configure('Success.TButton',
                        background='#00f593',
                        foreground='white',
                        font=('Segoe UI', 9, 'bold'),
                        borderwidth=0,
                        focuscolor='none')

        style.map('Success.TButton',
                  background=[('active', '#00d084'), ('pressed', '#00b86b')])

        style.configure('Danger.TButton',
                        background='#f13c20',
                        foreground='white',
                        font=('Segoe UI', 9, 'bold'),
                        borderwidth=0,
                        focuscolor='none')

        style.map('Danger.TButton',
                  background=[('active', '#d32f2f'), ('pressed', '#b71c1c')])

        style.configure('TNotebook',
                        background='#0e0e10',
                        borderwidth=0)

        style.configure('TNotebook.Tab',
                        background='#18181b',
                        foreground='#adadb8',
                        padding=[15, 10],
                        font=('Segoe UI', 9, 'bold'))

        style.map('TNotebook.Tab',
                  background=[('selected', '#9146ff'), ('active', '#772ce8')],
                  foreground=[('selected', 'white'), ('active', 'white')])

    def create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        main_frame = tk.Frame(self.root, bg='#0e0e10')
        main_frame.pack(fill='both', expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        header_frame = tk.Frame(main_frame, bg='#0e0e10')
        header_frame.pack(fill='x', pady=(0, 20))

        # –°–æ–∑–¥–∞–Ω–∏–µ notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill='both', expand=True)

        # –í–∫–ª–∞–¥–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.create_connection_tab()

        # –í–∫–ª–∞–¥–∫–∞ –∫–æ–º–∞–Ω–¥
        self.create_commands_tab()

        self.create_auto_messages_tab()

        # –í–∫–ª–∞–¥–∫–∞ –ª–æ–≥–æ–≤
        self.create_logs_tab()

    def create_connection_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        connection_frame = ttk.Frame(self.notebook)
        self.notebook.add(connection_frame, text="üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")

        main_container = tk.Frame(connection_frame, bg='#0e0e10')
        main_container.pack(fill='both', expand=True)

        content_frame = tk.Frame(main_container, bg='#0e0e10')
        content_frame.pack(fill='both', expand=True)

        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å—Ç–∞—Ç—É—Å
        left_column = tk.Frame(content_frame, bg='#0e0e10')
        left_column.pack(side='left', fill='both', expand=True, padx=(0, 10))

        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        right_column = tk.Frame(content_frame, bg='#0e0e10')
        right_column.pack(side='right', fill='both', expand=True, padx=(10, 0))

        # –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
        settings_card = tk.Frame(left_column, bg='#18181b', relief='flat', bd=0)
        settings_card.pack(fill='x', pady=(0, 15))

        card_content = tk.Frame(settings_card, bg='#18181b')
        card_content.pack(fill='x', padx=20, pady=20)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        tk.Label(card_content, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", bg='#18181b', fg='#ffffff',
                 font=('Segoe UI', 12, 'bold')).pack(anchor='w', pady=(0, 15))

        # OAuth —Ç–æ–∫–µ–Ω
        tk.Label(card_content, text="üîë OAuth —Ç–æ–∫–µ–Ω:", bg='#18181b', fg='#adadb8',
                 font=('Segoe UI', 10, 'bold')).pack(anchor='w', pady=(0, 5))
        self.oauth_var = tk.StringVar(value=self.config.get('oauth_token', ''))
        oauth_entry = tk.Entry(card_content, textvariable=self.oauth_var,
                               font=('Segoe UI', 10), bg='#26262c', fg='white',
                               insertbackground='#9146ff', relief='flat', bd=0,
                               highlightthickness=2, highlightcolor='#9146ff',
                               highlightbackground='#3a3a3d')
        oauth_entry.pack(fill='x', pady=(0, 15), ipady=8)
        self.setup_paste_support(oauth_entry)

        # –ö–∞–Ω–∞–ª
        tk.Label(card_content, text="üì∫ –ö–∞–Ω–∞–ª:", bg='#18181b', fg='#adadb8',
                 font=('Segoe UI', 10, 'bold')).pack(anchor='w', pady=(0, 5))
        self.channel_var = tk.StringVar(value=self.config.get('channel', ''))
        channel_entry = tk.Entry(card_content, textvariable=self.channel_var,
                                 font=('Segoe UI', 10), bg='#26262c', fg='white',
                                 insertbackground='#9146ff', relief='flat', bd=0,
                                 highlightthickness=2, highlightcolor='#9146ff',
                                 highlightbackground='#3a3a3d')
        channel_entry.pack(fill='x', pady=(0, 20), ipady=8)
        self.setup_paste_support(channel_entry)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = tk.Frame(card_content, bg='#18181b')
        buttons_frame.pack(fill='x')

        self.connect_btn = ttk.Button(buttons_frame, text="üöÄ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è",
                                      command=self.toggle_connection, style='Success.TButton')
        self.connect_btn.pack(side='left', padx=(0, 10))

        ttk.Button(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                   command=self.save_config, style='Custom.TButton').pack(side='left')

        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
        status_card = tk.Frame(left_column, bg='#18181b', relief='flat', bd=0)
        status_card.pack(fill='x')

        status_content = tk.Frame(status_card, bg='#18181b')
        status_content.pack(fill='x', padx=20, pady=20)

        tk.Label(status_content, text="üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", bg='#18181b', fg='#ffffff',
                 font=('Segoe UI', 11, 'bold')).pack(anchor='w', pady=(0, 8))

        self.status_label = tk.Label(status_content, text="‚≠ï –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω",
                                     bg='#18181b', fg='#f13c20', font=('Segoe UI', 10, 'bold'))
        self.status_label.pack(anchor='w')

        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ –ø—Ä–∞–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
        instruction_card = tk.Frame(right_column, bg='#18181b', relief='flat', bd=0)
        instruction_card.pack(fill='both', expand=True)

        instruction_content = tk.Frame(instruction_card, bg='#18181b')
        instruction_content.pack(fill='both', expand=True, padx=20, pady=20)

        tk.Label(instruction_content, text="üìã –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω", bg='#18181b', fg='#ffffff',
                 font=('Segoe UI', 11, 'bold')).pack(anchor='w', pady=(0, 12))

        instructions = [
            "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç:",
            "   twitchtokengenerator.com",
            "",
            "2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'Generate Token'",
            "",
            "3. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ Twitch",
            "",
            "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ACCESS TOKEN",
            "   (–ø–µ—Ä–≤—ã–π –∑–µ–ª–µ–Ω—ã–π —Ç–æ–∫–µ–Ω)",
            "",
            "5. –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ø–æ–ª–µ oAuth —Ç–æ–∫–µ–Ω",
            "   –∏ —É–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª"
        ]

        for instruction in instructions:
            if instruction == "":
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –ø—É–Ω–∫—Ç–∞–º–∏
                tk.Frame(instruction_content, bg='#18181b', height=3).pack(fill='x')
            else:
                tk.Label(instruction_content, text=instruction, bg='#18181b', fg='#adadb8',
                         font=('Segoe UI', 9), justify='left').pack(anchor='w', pady=1)

    def create_commands_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∫–æ–º–∞–Ω–¥"""
        commands_frame = ttk.Frame(self.notebook)
        self.notebook.add(commands_frame, text="‚ö° –ö–æ–º–∞–Ω–¥—ã")

        main_container = tk.Frame(commands_frame, bg='#0e0e10')
        main_container.pack(fill='both', expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        header_card = tk.Frame(main_container, bg='#18181b', relief='flat', bd=0)
        header_card.pack(fill='x', pady=(0, 15))

        header_content = tk.Frame(header_card, bg='#18181b')
        header_content.pack(fill='x', padx=20, pady=15)

        tk.Label(header_content, text="‚ö° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏", bg='#18181b', fg='#ffffff',
                 font=('Segoe UI', 12, 'bold')).pack(anchor='w', pady=(0, 12))

        buttons_frame = tk.Frame(header_content, bg='#18181b')
        buttons_frame.pack(fill='x')

        ttk.Button(buttons_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å",
                   command=self.add_command, style='Success.TButton').pack(side='left', padx=(0, 8))

        ttk.Button(buttons_frame, text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å",
                   command=self.edit_command, style='Custom.TButton').pack(side='left', padx=(0, 8))

        ttk.Button(buttons_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                   command=self.delete_command, style='Danger.TButton').pack(side='left')

        # –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ
        list_card = tk.Frame(main_container, bg='#18181b', relief='flat', bd=0)
        list_card.pack(fill='both', expand=True)

        list_content = tk.Frame(list_card, bg='#18181b')
        list_content.pack(fill='both', expand=True, padx=20, pady=20)

        # –°–æ–∑–¥–∞–Ω–∏–µ Treeview —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
        columns = ('–ö–æ–º–∞–Ω–¥–∞', '–û—Ç–≤–µ—Ç', '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π')
        self.commands_tree = ttk.Treeview(list_content, columns=columns, show='headings', height=18)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è Treeview
        style = ttk.Style()
        style.configure('Treeview',
                        background='#26262c',
                        foreground='white',
                        fieldbackground='#26262c',
                        font=('Segoe UI', 9))
        style.configure('Treeview.Heading',
                        background='#9146ff',
                        foreground='white',
                        font=('Segoe UI', 10, 'bold'))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        self.commands_tree.heading('–ö–æ–º–∞–Ω–¥–∞', text='üéØ –ö–æ–º–∞–Ω–¥–∞')
        self.commands_tree.heading('–û—Ç–≤–µ—Ç', text='üí¨ –û—Ç–≤–µ—Ç')
        self.commands_tree.heading('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π', text='üìä –°—á–µ—Ç—á–∏–∫')

        self.commands_tree.column('–ö–æ–º–∞–Ω–¥–∞', width=150)
        self.commands_tree.column('–û—Ç–≤–µ—Ç', width=350)
        self.commands_tree.column('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π', width=100)

        # –°–∫—Ä–æ–ª–ª–±–∞—Ä —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
        scrollbar = ttk.Scrollbar(list_content, orient='vertical', command=self.commands_tree.yview)
        self.commands_tree.configure(yscrollcommand=scrollbar.set)

        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.commands_tree.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ —Å–ø–∏—Å–æ–∫
        self.refresh_commands_list()

    def create_auto_messages_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π"""
        auto_messages_frame = ttk.Frame(self.notebook)
        self.notebook.add(auto_messages_frame, text="‚è∞ –ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è")

        main_container = tk.Frame(auto_messages_frame, bg='#0e0e10')
        main_container.pack(fill='both', expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        header_card = tk.Frame(main_container, bg='#18181b', relief='flat', bd=0)
        header_card.pack(fill='x', pady=(0, 15))

        header_content = tk.Frame(header_card, bg='#18181b')
        header_content.pack(fill='x', padx=20, pady=15)

        tk.Label(header_content, text="‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è", bg='#18181b', fg='#ffffff',
                 font=('Segoe UI', 12, 'bold')).pack(anchor='w', pady=(0, 12))

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        control_frame = tk.Frame(header_content, bg='#18181b')
        control_frame.pack(fill='x', pady=(0, 15))

        self.auto_messages_status_label = tk.Label(control_frame, text="‚≠ï –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
                                                   bg='#18181b', fg='#f13c20',
                                                   font=('Segoe UI', 10, 'bold'))
        self.auto_messages_status_label.pack(side='left')

        self.toggle_auto_messages_btn = ttk.Button(control_frame, text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å",
                                                   command=self.toggle_auto_messages,
                                                   style='Success.TButton')
        self.toggle_auto_messages_btn.pack(side='right', padx=(0, 10))

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        buttons_frame = tk.Frame(header_content, bg='#18181b')
        buttons_frame.pack(fill='x')

        ttk.Button(buttons_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å",
                   command=self.add_auto_message, style='Success.TButton').pack(side='left', padx=(0, 8))

        ttk.Button(buttons_frame, text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å",
                   command=self.edit_auto_message, style='Custom.TButton').pack(side='left', padx=(0, 8))

        ttk.Button(buttons_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                   command=self.delete_auto_message, style='Danger.TButton').pack(side='left')

        # –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π
        list_card = tk.Frame(main_container, bg='#18181b', relief='flat', bd=0)
        list_card.pack(fill='both', expand=True)

        list_content = tk.Frame(list_card, bg='#18181b')
        list_content.pack(fill='both', expand=True, padx=20, pady=20)

        # –°–æ–∑–¥–∞–Ω–∏–µ Treeview –¥–ª—è –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π
        columns = ('–°–æ–æ–±—â–µ–Ω–∏–µ', '–ò–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω)', '–°—Ç–∞—Ç—É—Å', '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
        self.auto_messages_tree = ttk.Treeview(list_content, columns=columns, show='headings', height=15)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        self.auto_messages_tree.heading('–°–æ–æ–±—â–µ–Ω–∏–µ', text='üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ')
        self.auto_messages_tree.heading('–ò–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω)', text='‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª')
        self.auto_messages_tree.heading('–°—Ç–∞—Ç—É—Å', text='üìä –°—Ç–∞—Ç—É—Å')
        self.auto_messages_tree.heading('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', text='üìà –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')

        self.auto_messages_tree.column('–°–æ–æ–±—â–µ–Ω–∏–µ', width=300)
        self.auto_messages_tree.column('–ò–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω)', width=100)
        self.auto_messages_tree.column('–°—Ç–∞—Ç—É—Å', width=80)
        self.auto_messages_tree.column('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', width=80)

        # –°–∫—Ä–æ–ª–ª–±–∞—Ä
        auto_scrollbar = ttk.Scrollbar(list_content, orient='vertical', command=self.auto_messages_tree.yview)
        self.auto_messages_tree.configure(yscrollcommand=auto_scrollbar.set)

        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.auto_messages_tree.pack(side='left', fill='both', expand=True)
        auto_scrollbar.pack(side='right', fill='y')

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–ø–∏—Å–æ–∫
        self.refresh_auto_messages_list()

    def create_logs_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ª–æ–≥–æ–≤"""
        logs_frame = ttk.Frame(self.notebook)
        self.notebook.add(logs_frame, text="üìù –õ–æ–≥–∏")

        main_container = tk.Frame(logs_frame, bg='#0e0e10')
        main_container.pack(fill='both', expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        header_card = tk.Frame(main_container, bg='#18181b', relief='flat', bd=0)
        header_card.pack(fill='x', pady=(0, 15))

        header_content = tk.Frame(header_card, bg='#18181b')
        header_content.pack(fill='x', padx=20, pady=15)

        header_frame = tk.Frame(header_content, bg='#18181b')
        header_frame.pack(fill='x')

        tk.Label(header_frame, text="üìù –ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π", bg='#18181b', fg='#ffffff',
                 font=('Segoe UI', 12, 'bold')).pack(side='left')

        ttk.Button(header_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å",
                   command=self.clear_logs, style='Danger.TButton').pack(side='right')

        # –û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        logs_card = tk.Frame(main_container, bg='#18181b', relief='flat', bd=0)
        logs_card.pack(fill='both', expand=True)

        logs_content = tk.Frame(logs_card, bg='#18181b')
        logs_content.pack(fill='both', expand=True, padx=20, pady=20)

        self.logs_text = scrolledtext.ScrolledText(logs_content, height=22, width=80,
                                                   bg='#26262c', fg='#ffffff',
                                                   font=('Consolas', 9),
                                                   insertbackground='#9146ff',
                                                   selectbackground='#9146ff',
                                                   selectforeground='white',
                                                   relief='flat', bd=0)
        self.logs_text.pack(fill='both', expand=True)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.add_log("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")

    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            if os.path.exists('config.json'):
                with open('config.json', 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            self.add_log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return {}

    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            config = {
                'oauth_token': self.oauth_var.get(),
                'channel': self.channel_var.get()
            }
            with open('config.json', 'w', encoding='utf-8') as f:
                json.dump(config, f, ensure_ascii=False, indent=2)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            self.add_log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            self.add_log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def load_commands(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥"""
        try:
            if os.path.exists('commands.json'):
                with open('commands.json', 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            self.add_log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
        return {}

    def save_commands(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥"""
        try:
            with open('commands.json', 'w', encoding='utf-8') as f:
                json.dump(self.commands, f, ensure_ascii=False, indent=2)
        except Exception as e:
            self.add_log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥: {e}")

    def load_auto_messages(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if os.path.exists('auto_messages.json'):
                with open('auto_messages.json', 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            self.add_log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return {}

    def save_auto_messages(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            with open('auto_messages.json', 'w', encoding='utf-8') as f:
                json.dump(self.auto_messages, f, ensure_ascii=False, indent=2)
        except Exception as e:
            self.add_log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    def refresh_commands_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"""
        # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞
        for item in self.commands_tree.get_children():
            self.commands_tree.delete(item)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
        for command, data in self.commands.items():
            response = data.get('response', '')
            usage_count = data.get('usage_count', 0)
            self.commands_tree.insert('', 'end', values=(command, response, usage_count))

    def refresh_auto_messages_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞
        for item in self.auto_messages_tree.get_children():
            self.auto_messages_tree.delete(item)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π
        for msg_id, data in self.auto_messages.items():
            message = data.get('message', '')[:50] + ('...' if len(data.get('message', '')) > 50 else '')
            interval = data.get('interval', 0)
            enabled = "‚úÖ –í–∫–ª" if data.get('enabled', True) else "‚ùå –í—ã–∫–ª"
            sent_count = data.get('sent_count', 0)
            self.auto_messages_tree.insert('', 'end', values=(message, interval, enabled, sent_count))

    def add_command(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        self.command_dialog()

    def edit_command(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        selected = self.commands_tree.selection()
        if not selected:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        item = self.commands_tree.item(selected[0])
        command = item['values'][0]
        self.command_dialog(command)

    def delete_command(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        selected = self.commands_tree.selection()
        if not selected:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        item = self.commands_tree.item(selected[0])
        command = item['values'][0]

        if command == 'commands':
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ö–æ–º–∞–Ω–¥–∞ !commands —è–≤–ª—è–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞")
            return

        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É '{command}'?"):
            del self.commands[command]
            self.save_commands()
            self.refresh_commands_list()
            self.add_log(f"–ö–æ–º–∞–Ω–¥–∞ '{command}' —É–¥–∞–ª–µ–Ω–∞")

    def add_auto_message(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.auto_message_dialog()

    def edit_auto_message(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è"""
        selected = self.auto_messages_tree.selection()
        if not selected:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        item_index = self.auto_messages_tree.index(selected[0])
        msg_id = list(self.auto_messages.keys())[item_index]
        self.auto_message_dialog(msg_id)

    def delete_auto_message(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è"""
        selected = self.auto_messages_tree.selection()
        if not selected:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        item_index = self.auto_messages_tree.index(selected[0])
        msg_id = list(self.auto_messages.keys())[item_index]

        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ?"):
            del self.auto_messages[msg_id]
            self.save_auto_messages()
            self.refresh_auto_messages_list()
            self.add_log(f"–ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")

    def command_dialog(self, edit_command=None):
        """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
        dialog = tk.Toplevel(self.root)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É" if not edit_command else "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
        dialog.geometry("450x400")
        dialog.configure(bg='#0e0e10')
        dialog.resizable(False, False)

        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        dialog.transient(self.root)
        dialog.grab_set()

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = tk.Frame(dialog, bg='#0e0e10')
        main_container.pack(fill='both', expand=True)

        # –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–∏–∞–ª–æ–≥–∞
        dialog_card = tk.Frame(main_container, bg='#18181b', relief='flat', bd=0)
        dialog_card.pack(fill='both', expand=True)

        card_content = tk.Frame(dialog_card, bg='#18181b')
        card_content.pack(fill='both', expand=True, padx=20, pady=20)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_text = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É" if not edit_command else f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É '{edit_command}'"
        title_label = tk.Label(card_content, text=title_text, bg='#18181b', fg='#ffffff',
                               font=('Segoe UI', 12, 'bold'))
        title_label.pack(pady=(0, 20))

        # –ü–æ–ª—è –≤–≤–æ–¥–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        tk.Label(card_content, text="üéØ –ö–æ–º–∞–Ω–¥–∞ (–±–µ–∑ !):", bg='#18181b', fg='#adadb8',
                 font=('Segoe UI', 10, 'bold')).pack(anchor='w', pady=(0, 5))
        command_var = tk.StringVar(value=edit_command if edit_command else '')
        command_entry = tk.Entry(card_content, textvariable=command_var,
                                 font=('Segoe UI', 10), bg='#26262c', fg='white',
                                 insertbackground='#9146ff', relief='flat', bd=0,
                                 highlightthickness=2, highlightcolor='#9146ff',
                                 highlightbackground='#3a3a3d')
        command_entry.pack(fill='x', pady=(0, 15), ipady=8)
        self.setup_paste_support(command_entry)

        tk.Label(card_content, text="üí¨ –û—Ç–≤–µ—Ç –±–æ—Ç–∞:", bg='#18181b', fg='#adadb8',
                 font=('Segoe UI', 10, 'bold')).pack(anchor='w', pady=(0, 5))
        response_text = tk.Text(card_content, width=45, height=5,
                                font=('Segoe UI', 10), bg='#26262c', fg='white',
                                insertbackground='#9146ff', relief='flat', bd=0, wrap='word',
                                highlightthickness=2, highlightcolor='#9146ff',
                                highlightbackground='#3a3a3d')
        response_text.pack(fill='x', pady=(0, 20))
        self.setup_text_paste_support(response_text)

        # –ö–Ω–æ–ø–∫–∏ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        buttons_frame = tk.Frame(card_content, bg='#18181b', height=50)
        buttons_frame.pack(fill='x', pady=(15, 0))
        buttons_frame.pack_propagate(False)

        def save_command():
            command = command_var.get().strip()
            response = response_text.get('1.0', 'end-1c').strip()

            if not command:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã")
                command_entry.focus()
                return

            if not response:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –±–æ—Ç–∞")
                response_text.focus()
                return

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            if command not in self.commands:
                self.commands[command] = {'usage_count': 0}

            self.commands[command]['response'] = response
            self.save_commands()
            self.refresh_commands_list()

            action = "–æ–±–Ω–æ–≤–ª–µ–Ω–∞" if edit_command else "–¥–æ–±–∞–≤–ª–µ–Ω–∞"
            self.add_log(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ '{command}' {action}")
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ö–æ–º–∞–Ω–¥–∞ '{command}' —É—Å–ø–µ—à–Ω–æ {action}!")
            dialog.destroy()

        def cancel_dialog():
            dialog.destroy()

        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º
        save_btn = tk.Button(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                             command=save_command, bg='#00f593', fg='white',
                             font=('Segoe UI', 10, 'bold'), relief='flat', bd=0,
                             padx=25, pady=10, cursor='hand2')
        save_btn.pack(side='right', padx=(10, 0))

        cancel_btn = tk.Button(buttons_frame, text="‚ùå –û—Ç–º–µ–Ω–∞",
                               command=cancel_dialog, bg='#f13c20', fg='white',
                               font=('Segoe UI', 10, 'bold'), relief='flat', bd=0,
                               padx=25, pady=10, cursor='hand2')
        cancel_btn.pack(side='right')

        # –≠—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞–≤–µ–¥–µ–Ω–∏—è
        def on_save_enter(e):
            save_btn.config(bg='#00d084')

        def on_save_leave(e):
            save_btn.config(bg='#00f593')

        def on_cancel_enter(e):
            cancel_btn.config(bg='#d32f2f')

        def on_cancel_leave(e):
            cancel_btn.config(bg='#f13c20')

        save_btn.bind('<Enter>', on_save_enter)
        save_btn.bind('<Leave>', on_save_leave)
        cancel_btn.bind('<Enter>', on_cancel_enter)
        cancel_btn.bind('<Leave>', on_cancel_leave)

        # –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –∫–æ–º–∞–Ω–¥—ã
        command_entry.focus()

        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        def on_enter_key(event):
            save_command()

        def on_escape_key(event):
            cancel_dialog()

        dialog.bind('<Return>', on_enter_key)
        dialog.bind('<Escape>', on_escape_key)

    def auto_message_dialog(self, edit_msg_id=None):
        """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è"""
        dialog = tk.Toplevel(self.root)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ" if not edit_msg_id else "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ")
        dialog.geometry("500x450")
        dialog.configure(bg='#0e0e10')
        dialog.resizable(False, False)

        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        dialog.transient(self.root)
        dialog.grab_set()

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = tk.Frame(dialog, bg='#0e0e10')
        main_container.pack(fill='both', expand=True)

        # –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–∏–∞–ª–æ–≥–∞
        dialog_card = tk.Frame(main_container, bg='#18181b', relief='flat', bd=0)
        dialog_card.pack(fill='both', expand=True)

        card_content = tk.Frame(dialog_card, bg='#18181b')
        card_content.pack(fill='both', expand=True, padx=20, pady=20)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_text = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ" if not edit_msg_id else "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ"
        title_label = tk.Label(card_content, text=title_text, bg='#18181b', fg='#ffffff',
                               font=('Segoe UI', 12, 'bold'))
        title_label.pack(pady=(0, 20))

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        tk.Label(card_content, text="üí¨ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:", bg='#18181b', fg='#adadb8',
                 font=('Segoe UI', 10, 'bold')).pack(anchor='w', pady=(0, 5))
        message_text = tk.Text(card_content, width=50, height=4,
                               font=('Segoe UI', 10), bg='#26262c', fg='white',
                               insertbackground='#9146ff', relief='flat', bd=0, wrap='word',
                               highlightthickness=2, highlightcolor='#9146ff',
                               highlightbackground='#3a3a3d')
        message_text.pack(fill='x', pady=(0, 15))
        self.setup_text_paste_support(message_text)

        tk.Label(card_content, text="‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω—É—Ç—ã):", bg='#18181b', fg='#adadb8',
                 font=('Segoe UI', 10, 'bold')).pack(anchor='w', pady=(0, 5))
        interval_var = tk.StringVar(value='5')
        interval_entry = tk.Entry(card_content, textvariable=interval_var,
                                  font=('Segoe UI', 10), bg='#26262c', fg='white',
                                  insertbackground='#9146ff', relief='flat', bd=0,
                                  highlightthickness=2, highlightcolor='#9146ff',
                                  highlightbackground='#3a3a3d')
        interval_entry.pack(fill='x', pady=(0, 15), ipady=8)
        self.setup_paste_support(interval_entry)

        # –ß–µ–∫–±–æ–∫—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        enabled_var = tk.BooleanVar(value=True)
        enabled_check = tk.Checkbutton(card_content, text="‚úÖ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ",
                                       variable=enabled_var, bg='#18181b', fg='#adadb8',
                                       selectcolor='#26262c', activebackground='#18181b',
                                       activeforeground='#ffffff', font=('Segoe UI', 10))
        enabled_check.pack(anchor='w', pady=(0, 20))

        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
        if edit_msg_id and edit_msg_id in self.auto_messages:
            data = self.auto_messages[edit_msg_id]
            message_text.insert('1.0', data.get('message', ''))
            interval_var.set(str(data.get('interval', 5)))
            enabled_var.set(data.get('enabled', True))

        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = tk.Frame(card_content, bg='#18181b', height=50)
        buttons_frame.pack(fill='x', pady=(15, 0))
        buttons_frame.pack_propagate(False)

        def save_auto_message():
            message = message_text.get('1.0', 'end-1c').strip()
            try:
                interval = int(interval_var.get())
            except ValueError:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                interval_entry.focus()
                return

            if not message:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
                message_text.focus()
                return

            if interval < 1:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                interval_entry.focus()
                return

            # –°–æ–∑–¥–∞–µ–º ID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            if edit_msg_id:
                msg_id = edit_msg_id
            else:
                msg_id = str(int(time.time()))

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è
            self.auto_messages[msg_id] = {
                'message': message,
                'interval': interval,
                'enabled': enabled_var.get(),
                'sent_count': self.auto_messages.get(msg_id, {}).get('sent_count', 0),
                'last_sent': 0
            }

            self.save_auto_messages()
            self.refresh_auto_messages_list()

            action = "–æ–±–Ω–æ–≤–ª–µ–Ω–æ" if edit_msg_id else "–¥–æ–±–∞–≤–ª–µ–Ω–æ"
            self.add_log(f"‚úÖ –ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ {action}")
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ {action}!")
            dialog.destroy()

        def cancel_dialog():
            dialog.destroy()

        # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã
        save_btn = tk.Button(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                             command=save_auto_message, bg='#00f593', fg='white',
                             font=('Segoe UI', 10, 'bold'), relief='flat', bd=0,
                             padx=25, pady=10, cursor='hand2')
        save_btn.pack(side='right', padx=(10, 0))

        cancel_btn = tk.Button(buttons_frame, text="‚ùå –û—Ç–º–µ–Ω–∞",
                               command=cancel_dialog, bg='#f13c20', fg='white',
                               font=('Segoe UI', 10, 'bold'), relief='flat', bd=0,
                               padx=25, pady=10, cursor='hand2')
        cancel_btn.pack(side='right')

        # –≠—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞–≤–µ–¥–µ–Ω–∏—è
        def on_save_enter(e):
            save_btn.config(bg='#00d084')

        def on_save_leave(e):
            save_btn.config(bg='#00f593')

        def on_cancel_enter(e):
            cancel_btn.config(bg='#d32f2f')

        def on_cancel_leave(e):
            cancel_btn.config(bg='#f13c20')

        save_btn.bind('<Enter>', on_save_enter)
        save_btn.bind('<Leave>', on_save_leave)
        cancel_btn.bind('<Enter>', on_cancel_enter)
        cancel_btn.bind('<Leave>', on_cancel_leave)

        # –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text.focus()

        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        def on_enter_key(event):
            save_auto_message()

        def on_escape_key(event):
            cancel_dialog()

        dialog.bind('<Return>', on_enter_key)
        dialog.bind('<Escape>', on_escape_key)

    def toggle_auto_messages(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.connected:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ Twitch!")
            return

        if not self.auto_messages:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ!")
            return

        if self.auto_messages_enabled:
            self.stop_auto_messages_func()
        else:
            self.start_auto_messages_func()

    def start_auto_messages_func(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.auto_messages_enabled = True
        self.stop_auto_messages = False

        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π
        self.auto_messages_thread = threading.Thread(target=self.auto_messages_loop, daemon=True)
        self.auto_messages_thread.start()

        self.auto_messages_status_label.config(text="üü¢ –ó–∞–ø—É—â–µ–Ω–æ", fg='#00f593')
        self.toggle_auto_messages_btn.config(text="‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", style='Danger.TButton')

        self.add_log("üöÄ –ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω—ã")

    def stop_auto_messages_func(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.auto_messages_enabled = False
        self.stop_auto_messages = True

        self.auto_messages_status_label.config(text="‚≠ï –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", fg='#f13c20')
        self.toggle_auto_messages_btn.config(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", style='Success.TButton')

        self.add_log("‚è∏Ô∏è –ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    def auto_messages_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π"""
        while not self.stop_auto_messages and self.auto_messages_enabled:
            try:
                current_time = time.time()

                for msg_id, data in self.auto_messages.items():
                    if not data.get('enabled', True):
                        continue

                    interval_seconds = data.get('interval', 5) * 60  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã
                    last_sent = data.get('last_sent', 0)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if current_time - last_sent >= interval_seconds:
                        if self.connected and self.socket:
                            message = data.get('message', '')
                            self.send_message(message)

                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                            self.auto_messages[msg_id]['last_sent'] = current_time
                            self.auto_messages[msg_id]['sent_count'] = data.get('sent_count', 0) + 1

                            self.save_auto_messages()

                            # –û–±–Ω–æ–≤–ª—è–µ–º UI
                            self.root.after(0, self.refresh_auto_messages_list)

                            self.add_log(f"üì§ –ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message[:50]}...")

                time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

            except Exception as e:
                self.add_log(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                break

    def connect_to_twitch(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Twitch"""
        oauth_token = self.oauth_var.get().strip()
        channel = self.channel_var.get().strip()

        if not all([oauth_token, channel]):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            return

        if not oauth_token.startswith('oauth:'):
            oauth_token = f'oauth:{oauth_token}'

        try:
            self.socket = socket.socket()
            self.socket.connect(('irc.chat.twitch.tv', 6667))
            self.socket.send(f"PASS {oauth_token}\n".encode('utf-8'))
            self.socket.send(f"NICK {channel}\n".encode('utf-8'))
            self.socket.send(f"JOIN #{channel}\n".encode('utf-8'))

            self.connected = True
            self.stop_bot = False

            # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            self.bot_thread = threading.Thread(target=self.bot_loop, daemon=True)
            self.bot_thread.start()

            self.status_label.config(text="üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω", fg='#00f593')
            self.connect_btn.config(text="üîå –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è", style='Danger.TButton')

            self.add_log(f"üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É #{channel}")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {e}")
            self.add_log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

    def disconnect_from_twitch(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Twitch"""
        self.stop_bot = True
        self.connected = False

        if self.socket:
            try:
                self.socket.close()
            except:
                pass

        self.status_label.config(text="‚≠ï –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", fg='#f13c20')
        self.connect_btn.config(text="üöÄ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", style='Success.TButton')

        self.add_log("üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç Twitch")

    def toggle_connection(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if self.connected:
            self.disconnect_from_twitch()
        else:
            self.connect_to_twitch()

    def bot_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
        while not self.stop_bot and self.connected:
            try:
                response = self.socket.recv(1024).decode('utf-8')

                if response.strip():
                    self.add_log(f"[DEBUG] IRC: {response.strip()}")

                if response.startswith('PING'):
                    self.socket.send("PONG\n".encode('utf-8'))
                    self.add_log("[DEBUG] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω PONG")
                    continue

                if 'PRIVMSG' in response:
                    try:
                        # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ IRC —Å–æ–æ–±—â–µ–Ω–∏—è
                        parts = response.strip().split(' ')
                        if len(parts) >= 4:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            username = parts[0].split('!')[0][1:] if '!' in parts[0] else parts[0][1:]

                            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤—Å–µ –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ –¥–≤–æ–µ—Ç–æ—á–∏—è)
                            message_start = response.find(':', 1)  # –ù–∞—Ö–æ–¥–∏–º –≤—Ç–æ—Ä–æ–µ –¥–≤–æ–µ—Ç–æ—á–∏–µ
                            if message_start != -1:
                                message = response[message_start + 1:].strip()

                                self.add_log(f"{username}: {message}")

                                if message.startswith('!'):
                                    command = message[1:].split()[0].lower()
                                    self.add_log(f"[DEBUG] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: '{command}'")

                                    if command == 'commands':
                                        response_text = self.get_commands_list()
                                        self.add_log(f"[DEBUG] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: {response_text}")

                                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                                        self.send_message(response_text)

                                        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
                                        if 'commands' in self.commands:
                                            self.commands['commands']['usage_count'] += 1
                                            self.save_commands()
                                            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ UI (–≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
                                            self.root.after(0, self.refresh_commands_list)

                                        self.add_log(f"‚úÖ –û—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∫–æ–º–∞–Ω–¥—É !commands: {response_text}")

                                    elif command in self.commands:
                                        response_text = self.commands[command]['response']
                                        self.add_log(f"[DEBUG] –ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{command}': {response_text}")

                                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                                        self.send_message(response_text)

                                        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
                                        self.commands[command]['usage_count'] += 1
                                        self.save_commands()

                                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ UI (–≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
                                        self.root.after(0, self.refresh_commands_list)

                                        self.add_log(f"‚úÖ –û—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∫–æ–º–∞–Ω–¥—É !{command}: {response_text}")
                                    else:
                                        self.add_log(f"[DEBUG] –ö–æ–º–∞–Ω–¥–∞ '{command}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ")
                                        available_commands = list(self.commands.keys())
                                        self.add_log(f"[DEBUG] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {available_commands}")
                            else:
                                self.add_log("[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ IRC —Å—Ç—Ä–æ–∫–µ")
                        else:
                            self.add_log(f"[DEBUG] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç PRIVMSG: {response.strip()}")
                    except Exception as parse_error:
                        self.add_log(f"[ERROR] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {parse_error}")
                        self.add_log(f"[ERROR] –ü—Ä–æ–±–ª–µ–º–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {response.strip()}")

            except Exception as e:
                if self.connected:
                    self.add_log(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –±–æ—Ç–∞: {e}")
                break

            time.sleep(0.1)

    def send_message(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
        if self.connected and self.socket:
            try:
                channel = self.channel_var.get().strip()
                full_message = f"PRIVMSG #{channel} :{message}\n"
                self.socket.send(full_message.encode('utf-8'))
                self.add_log(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {full_message.strip()}")
            except Exception as e:
                self.add_log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def add_log(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {message}\n"

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ UI (–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤)
        self.root.after(0, lambda: self._add_log_to_ui(log_message))

    def _add_log_to_ui(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ UI –ª–æ–≥–∞"""
        self.logs_text.insert('end', message)
        self.logs_text.see('end')

    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        self.logs_text.delete('1.0', 'end')
        self.add_log("–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")

    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.connected:
            self.disconnect_from_twitch()
        if self.auto_messages_enabled:
            self.stop_auto_messages_func()
        self.root.destroy()

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root.mainloop()

    def setup_paste_support(self, widget):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞"""

        def paste_from_clipboard(event):
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
                clipboard_content = self.root.clipboard_get()
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                widget.delete(0, 'end')
                widget.insert(0, clipboard_content)
                return 'break'  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            except tk.TclError:
                # –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                pass

        def create_context_menu(event):
            """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
            context_menu = tk.Menu(self.root, tearoff=0, bg='#2f2f35', fg='white',
                                   activebackground='#9146ff', activeforeground='white')

            context_menu.add_command(label="üìã –í—Å—Ç–∞–≤–∏—Ç—å",
                                     command=lambda: paste_from_clipboard(None))
            context_menu.add_separator()
            context_menu.add_command(label="‚úÇÔ∏è –í—ã—Ä–µ–∑–∞—Ç—å",
                                     command=lambda: widget.event_generate('<<Cut>>'))
            context_menu.add_command(label="üìÑ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
                                     command=lambda: widget.event_generate('<<Copy>>'))
            context_menu.add_command(label="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å",
                                     command=lambda: widget.delete(0, 'end'))

            try:
                context_menu.tk_popup(event.x_root, event.y_root)
            finally:
                context_menu.grab_release()

        # –ü—Ä–∏–≤—è–∑–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        widget.bind('<Control-v>', paste_from_clipboard)
        widget.bind('<Control-V>', paste_from_clipboard)

        # –ü—Ä–∏–≤—è–∑–∫–∞ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
        widget.bind('<Button-3>', create_context_menu)

    def setup_text_paste_support(self, text_widget):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Å—Ç–∞–≤–∫–∏ –¥–ª—è Text –≤–∏–¥–∂–µ—Ç–∞"""

        def paste_from_clipboard(event):
            try:
                clipboard_content = self.root.clipboard_get()
                text_widget.insert('insert', clipboard_content)
                return 'break'
            except tk.TclError:
                pass

        def create_text_context_menu(event):
            """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è Text –≤–∏–¥–∂–µ—Ç–∞"""
            context_menu = tk.Menu(self.root, tearoff=0, bg='#2f2f35', fg='white',
                                   activebackground='#9146ff', activeforeground='white')

            context_menu.add_command(label="üìã –í—Å—Ç–∞–≤–∏—Ç—å",
                                     command=lambda: paste_from_clipboard(None))
            context_menu.add_separator()
            context_menu.add_command(label="‚úÇÔ∏è –í—ã—Ä–µ–∑–∞—Ç—å",
                                     command=lambda: text_widget.event_generate('<<Cut>>'))
            context_menu.add_command(label="üìÑ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
                                     command=lambda: text_widget.event_generate('<<Copy>>'))
            context_menu.add_command(label="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å",
                                     command=lambda: text_widget.delete('1.0', 'end'))

            try:
                context_menu.tk_popup(event.x_root, event.y_root)
            finally:
                context_menu.grab_release()

        # –ü—Ä–∏–≤—è–∑–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        text_widget.bind('<Control-v>', paste_from_clipboard)
        text_widget.bind('<Control-V>', paste_from_clipboard)

        # –ü—Ä–∏–≤—è–∑–∫–∞ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏
        text_widget.bind('<Button-3>', create_text_context_menu)

    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f"{width}x{height}+{x}+{y}")


if __name__ == "__main__":
    app = TwitchChatBot()
    app.run()
